// jquery.pjax.js
// copyright chris wanstrath
// https://github.com/defunkt/jquery-pjax

(function($){

// When called on a link, fetches the href with ajax into the
// container specified as the first parameter or with the data-pjax
// attribute on the link itself.
//
// Tries to make sure the back button and ctrl+click work the way
// you'd expect.
//
// Accepts a jQuery ajax options object that may include these
// pjax specific options:
//
// container - Where to stick the response body. Usually a String selector.
//             $(container).html(xhr.responseBody)
//      push - Whether to pushState the URL. Defaults to true (of course).
//   replace - Want to use replaceState instead? That's cool.
//
// For convenience the first parameter can be either the container or
// the options object.
//
// Returns the jQuery object
$.fn.pjax = function( container, options ) {
  if ( options )
    options.container = container
  else
    options = $.isPlainObject(container) ? container : {container:container}

  options.container = findContainerFor(options.container)

  return this.live('click', function(event){
    // Middle click, cmd click, and ctrl click should open
    // links in a new tab as normal.
    if ( event.which > 1 || event.metaKey )
      return true

    // Ignore cross origin links
    if ( location.protocol !== this.protocol || location.host !== this.host )
      return true

    // Ignore anchors on the same page
    if ( this.hash && this.href.replace(this.hash, '') ===
         location.href.replace(location.hash, '') )
      return true

    var defaults = {
      url: this.href,
      container: $(this).attr('data-pjax'),
      clickedElement: $(this),
      fragment: null
    }

    $.pjax($.extend({}, defaults, options))

    event.preventDefault()
  })
}


// Loads a URL with ajax, puts the response body inside a container,
// then pushState()'s the loaded URL.
//
// Works just like $.ajax in that it accepts a jQuery ajax
// settings object (with keys like url, type, data, etc).
//
// Accepts these extra keys:
//
// container - Where to stick the response body.
//             $(container).html(xhr.responseBody)
//      push - Whether to pushState the URL. Defaults to true (of course).
//   replace - Want to use replaceState instead? That's cool.
//
// Use it just like $.ajax:
//
//   var xhr = $.pjax({ url: this.href, container: '#main' })
//   console.log( xhr.readyState )
//
// Returns whatever $.ajax returns.
var pjax = $.pjax = function( options ) {
  var $container = findContainerFor(options.container),
      success = options.success || $.noop

  // We don't want to let anyone override our success handler.
  delete options.success

  options = $.extend(true, {}, pjax.defaults, options)

  if ( $.isFunction(options.url) ) {
    options.url = options.url()
  }

  options.context = $container

  options.success = function(data){
    if ( options.fragment ) {
      // If they specified a fragment, look for it in the response
      // and pull it out.
      var $fragment = $(data).find(options.fragment)
      if ( $fragment.length )
        data = $fragment.children()
      else
        return window.location = options.url
    } else {
        // If we got no data or an entire web page, go directly
        // to the page and let normal error handling happen.
        if ( !$.trim(data) || /<html/i.test(data) )
          return window.location = options.url
    }

    // Make it happen.
    this.html(data)

    // If there's a <title> tag in the response, use it as
    // the page's title.
    var oldTitle = document.title,
        title = $.trim( this.find('title').remove().text() )

    // No <title>? Fragment? Look for data-title and title attributes.
    if ( !title && options.fragment ) {
      title = $fragment.attr('title') || $fragment.data('title')
    }

    if ( title ) document.title = title

    var state = {
      pjax: $container.selector,
      fragment: options.fragment,
      timeout: options.timeout
    }

    // If there are extra params, save the complete URL in the state object
    var query = $.param(options.data)
    if ( query != "_pjax=true" )
      state.url = options.url + (/\?/.test(options.url) ? "&" : "?") + query

    if ( options.replace ) {
      window.history.replaceState(state, document.title, options.url)
    } else if ( options.push ) {
      // this extra replaceState before first push ensures good back
      // button behavior
      if ( !pjax.active ) {
        window.history.replaceState($.extend({}, state, {url:null}), oldTitle)
        pjax.active = true
      }

      window.history.pushState(state, document.title, options.url)
    }

    // If the URL has a hash in it, make sure the browser
    // knows to navigate to the hash.
    var hash = window.location.hash.toString()
    if ( hash !== '' ) {
      window.location.href = hash
    }

    // Invoke their success handler if they gave us one.
    success.apply(this, arguments)
  }

  // Cancel the current request if we're already pjaxing
  var xhr = pjax.xhr
  if ( xhr && xhr.readyState < 4) {
    xhr.onreadystatechange = $.noop
    xhr.abort()
  }

  pjax.options = options
  pjax.xhr = $.ajax(options)
  $(document).trigger('pjax', [pjax.xhr, options])

  return pjax.xhr
}

// Internal: Find container element for a variety of inputs.
//
// Because we can't persist elements using the history API, we must be
// able to find a String selector that will consistently find the Element.
//
// container - A selector String, jQuery object, or DOM Element.
//
// Returns a jQuery object whose context is `document` and has a selector.
function findContainerFor(container) {
  container = $(container)

  if ( !container.length ) {
    throw "no pjax container for " + container.selector
  } else if ( container.selector !== '' && container.context === document ) {
    return container
  } else if ( container.attr('id') ) {
    return $('#' + container.attr('id'))
  } else {
    throw "cant get selector for pjax container!"
  }
}


pjax.defaults = {
  timeout: 650,
  push: true,
  replace: false,
  // We want the browser to maintain two separate internal caches: one for
  // pjax'd partial page loads and one for normal page loads. Without
  // adding this secret parameter, some browsers will often confuse the two.
  data: { _pjax: true },
  type: 'GET',
  dataType: 'html',
  beforeSend: function(xhr){
    this.trigger('pjax:start', [xhr, pjax.options])
    // start.pjax is deprecated
    this.trigger('start.pjax', [xhr, pjax.options])
    xhr.setRequestHeader('X-PJAX', 'true')
  },
  error: function(xhr, textStatus, errorThrown){
    if ( textStatus !== 'abort' )
      window.location = pjax.options.url
  },
  complete: function(xhr){
    this.trigger('pjax:end', [xhr, pjax.options])
    // end.pjax is deprecated
    this.trigger('end.pjax', [xhr, pjax.options])
  }
}


// Used to detect initial (useless) popstate.
// If history.state exists, assume browser isn't going to fire initial popstate.
var popped = ('state' in window.history), initialURL = location.href


// popstate handler takes care of the back and forward buttons
//
// You probably shouldn't use pjax on pages with other pushState
// stuff yet.
$(window).bind('popstate', function(event){
  // Ignore inital popstate that some browsers fire on page load
  var initialPop = !popped && location.href == initialURL
  popped = true
  if ( initialPop ) return

  var state = event.state

  if ( state && state.pjax ) {
    var container = state.pjax
    if ( $(container+'').length )
      $.pjax({
        url: state.url || location.href,
        fragment: state.fragment,
        container: container,
        push: false,
        timeout: state.timeout
      })
    else
      window.location = location.href
  }
})


// Add the state property to jQuery's event object so we can use it in
// $(window).bind('popstate')
if ( $.inArray('state', $.event.props) < 0 )
  $.event.props.push('state')


// Is pjax supported by this browser?
$.support.pjax =
  window.history && window.history.pushState && window.history.replaceState
  // pushState isn't reliable on iOS yet.
  && !navigator.userAgent.match(/(iPod|iPhone|iPad|WebApps\/.+CFNetwork)/)


// Fall back to normalcy for older browsers.
if ( !$.support.pjax ) {
  $.pjax = function( options ) {
    window.location = $.isFunction(options.url) ? options.url() : options.url
  }
  $.fn.pjax = function() { return this }
}

})(jQuery);
	×-?      WŸžKWŸžK<¼s\W N†   3    :https://toolbelt.heroku.com/scripts/jquery.pjax.js necko:classified 1 security-info FnhllAKWRHGAlo+ESXykKAAAAAAAAAAAwAAAAAAAAEaphjojH6pBabDSgSnsfLHeAAQAAgAAAAAAAAAAAAAAAAAAAAAB4vFIJp5wRkeyPxAQ9RJGKPqbqVvKO0mKuIl8ec8o/uhmCjImkVxP+7sgiYWmMt8FvcOXmlQiTNWFiWlrbpbqgwAAAAEAAAlBMIIJPTCCCCWgAwIBAgIQCkD9c9lXzXc8HSepY25JlDANBgkqhkiG9w0BAQsFADB1MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQuY29tMTQwMgYDVQQDEytEaWdpQ2VydCBTSEEyIEV4dGVuZGVkIFZhbGlkYXRpb24gU2VydmVyIENBMB4XDTE1MTAwMjAwMDAwMFoXDTE3MTAxODEyMDAwMFowgfQxHTAbBgNVBA8MFFByaXZhdGUgT3JnYW5pemF0aW9uMRMwEQYLKwYBBAGCNzwCAQMTAlVTMRkwFwYLKwYBBAGCNzwCAQITCERlbGF3YXJlMRAwDgYDVQQFEwc0NDI2NDQ5MRcwFQYDVQQJEw42NTAgN3RoIFN0cmVldDEOMAwGA1UEERMFOTQxMDMxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNpc2NvMRUwEwYDVQQKEwxIZXJva3UsIEluYy4xFzAVBgNVBAMTDnd3dy5oZXJva3UuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArt1ke7K5cdGvDe6l/mw+Hnx7yLdEhZbsEopWJ7p113s3fPOwwCjpuBh4Fq3Ih7JBVY/2O05mXGV/vICqvmElPgEA3pefjFlCyDPG9jp1nomisdU0YB4oZ5Byo3e7mW9PjYN3xw9jlNWwZVXE82zZWOhidwXGFaiL3hH3cODPLwcP3SJeBTaFxywdtClod34aKT9aqzuitqTbETyopGgk3IOJFrw43fee/GUoAR3MZVNmSFcVegBerqkXgdiItqj6Kboo+DClLDpPSounhe6iHXk6h5brYUd13bvj+2t2ypw+yHAtqYD6tWqYUlvNch3VjFAyRSNbpTu7EZew2pVDLQIDAQABo4IFRzCCBUMwHwYDVR0jBBgwFoAUPdNQpdagre7zSmAKZdMh1Pj41g8wHQYDVR0OBBYEFNCVeNMmma6pMVpcfAW1koGdffi9MIIB8gYDVR0RBIIB6TCCAeWCDnd3dy5oZXJva3UuY29tghFhZGRvbnMuaGVyb2t1LmNvbYIVYWRkb25zLXNzby5oZXJva3UuY29tgg9iZXRhLmhlcm9rdS5jb22CD2Jsb2cuaGVyb2t1LmNvbYIUYnVpbGRraXRzLmhlcm9rdS5jb22CFGRhc2hib2FyZC5oZXJva3UuY29tghRkYXRhY2xpcHMuaGVyb2t1LmNvbYIUZGV2Y2VudGVyLmhlcm9rdS5jb22CFWRpc2N1c3Npb24uaGVyb2t1LmNvbYIPaGVscC5oZXJva3UuY29tgg1pZC5oZXJva3UuY29tgg9qb2JzLmhlcm9rdS5jb22CEGthc2hpLmhlcm9rdS5jb22CD25ld3MuaGVyb2t1LmNvbYIOb2tpLmhlcm9rdS5jb22CE3BhcnRuZXJzLmhlcm9rdS5jb22CE3BheW1lbnRzLmhlcm9rdS5jb22CE3Bvc3RncmVzLmhlcm9rdS5jb22CEXJlZGVlbS5oZXJva3UuY29tghJzdWNjZXNzLmhlcm9rdS5jb22CFnN1cHBvcnQtc3NvLmhlcm9rdS5jb22CE3Rvb2xiZWx0Lmhlcm9rdS5jb22CEHZhdWx0Lmhlcm9rdS5jb22CD3dhemEuaGVyb2t1LmNvbTAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMHUGA1UdHwRuMGwwNKAyoDCGLmh0dHA6Ly9jcmwzLmRpZ2ljZXJ0LmNvbS9zaGEyLWV2LXNlcnZlci1nMS5jcmwwNKAyoDCGLmh0dHA6Ly9jcmw0LmRpZ2ljZXJ0LmNvbS9zaGEyLWV2LXNlcnZlci1nMS5jcmwwSwYDVR0gBEQwQjA3BglghkgBhv1sAgEwKjAoBggrBgEFBQcCARYcaHR0cHM6Ly93d3cuZGlnaWNlcnQuY29tL0NQUzAHBgVngQwBATCBiAYIKwYBBQUHAQEEfDB6MCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2VydC5jb20wUgYIKwYBBQUHMAKGRmh0dHA6Ly9jYWNlcnRzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydFNIQTJFeHRlbmRlZFZhbGlkYXRpb25TZXJ2ZXJDQS5jcnQwDAYDVR0TAQH/BAIwADCCAX0GCisGAQQB1nkCBAIEggFtBIIBaQFnAHcApLkJkLQYWBSHuxOizGdwCjw1mAT5G9+443fNDsgN3BAAAAFQOOnffAAABAMASDBGAiEA2zwnW2pFEk8dYAnct8flKmcEMRJm/CxEmgjYoCfDrDQCIQD2wUT2kN7DhS7qlPd9UvSOrImkSNOl4hF3ZaHTT3ZKZgB1AGj2mPgfZIK+OozuuSgdTPxxUV1nk9RE0QpnrLtPT/vEAAABUDjp318AAAQDAEYwRAIgdERP1vISBYES8Pm8NSz3pJyLa9uCLBMRU4lbAbAG1SwCICMQ9oWCtLnkupci7tGv4DI6HMiQ6FMh+0x6ttbieKoZAHUAVhQGmi/XwuzT9eG9RLI+x0Z2ubyZEVzA75SYVdaJ0N0AAAFQOOngeAAABAMARjBEAiAE/BRZBeFpam/+bsJtg+fEozsQPvJv/6dpKyipWcprwwIgLCMkeDtpCCEwDm+f4ygxyr/blRTOVX6G0MEWH0XuhMYwDQYJKoZIhvcNAQELBQADggEBAAb+WeGRLc5R5O8V+HBWUih51XHEd0zOrjV5cZITjxX5a+zb0NMWQWt7U01qtLMorR6hWdHMroz/aeqNsfGF5CJkfCQRj3lSeROfgnxcskEwwXMpGM3f/LSHTtDN9/aNVqOV2Eu4B3hVEWRrvH7l8wp8ProfopV/aCxq4ByHLyAqk+Dc6CnN/77JP/P4++/rSaP6MZBMZ3L8fE3T5Giaajq2CvltugAIOoqoRQ6TGBZ3fY18+QLonArGzHppOwqrTr4OdSBQoZyvmC6ibofg84FlnIQawz4Gn1xpoHuFm12OGVBKNQRK9geImK6aTgi4ZmEi+Z6B110t9pOE/H7vrivALwADAAAAAQEBAAA= request-method GET response-head HTTP/1.1 200 OK
Date: Mon, 01 Aug 2016 19:07:38 GMT
Content-Type: application/javascript;charset=utf-8
Last-Modified: Wed, 27 Jul 2016 13:34:13 GMT
Content-Length: 8488
x-content-type-options: nosniff
Server: thin 1.6.1 codename Death Proof
Via: 1.1 vegur
 uncompressed-len 0   !(